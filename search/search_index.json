{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Python-Youtube's documentation!","text":"<p>A Python wrapper around for YouTube Data API.</p> <p>Author: IkarosKun merle.liukun@gmail.com</p>"},{"location":"#introduction","title":"Introduction","text":"<p>With the YouTube Data API, you can add a variety of YouTube features to your application. </p> <p>Use the API to upload videos, manage playlists and subscriptions, update channel settings, and more.</p> <p>This library provides a Python interface for the YouTube DATA API.</p> <p>This library has works on all Python versions 3.6 and newer.</p> <p>Tips</p> <p>This library only supports <code>DATA API</code>, It does not support <code>Analytics and Reporting APIs</code> and <code>Live Streaming API</code>.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#version-098-2025-08-22","title":"Version 0.9.8 (2025-08-22)","text":""},{"location":"CHANGELOG/#whats-new","title":"What's New","text":"<ul> <li>Fix dependencies and update docs. Thanks for @sagarvora</li> </ul>"},{"location":"CHANGELOG/#version-097-2024-10-28","title":"Version 0.9.7 (2024-10-28)","text":""},{"location":"CHANGELOG/#whats-new_1","title":"What's New","text":"<ul> <li>Fix dependencies.</li> </ul>"},{"location":"CHANGELOG/#version-096-2024-09-09","title":"Version 0.9.6 (2024-09-09)","text":""},{"location":"CHANGELOG/#whats-new_2","title":"What's New","text":"<p>-Add new part field <code>recordingDetails</code> for video resource. Thanks for @vmx</p>"},{"location":"CHANGELOG/#version-095-2024-08-09","title":"Version 0.9.5 (2024-08-09)","text":""},{"location":"CHANGELOG/#whats-new_3","title":"What's New","text":"<ul> <li>Make video regionRestriction fields to Optional. Thanks for @pidi3000</li> <li>Modify some examples. Thanks for @pidi3000</li> <li>fix enf_parts for part with whitespaces. Thanks for @pidi3000</li> </ul>"},{"location":"CHANGELOG/#version-094-2024-02-18","title":"Version 0.9.4 (2024-02-18)","text":""},{"location":"CHANGELOG/#whats-new_4","title":"What's New","text":"<ul> <li>Add new parameter <code>for_handle</code> to get channel by handle.  </li> <li>fix some wrong error message.</li> </ul>"},{"location":"CHANGELOG/#version-093-2023-11-22","title":"Version 0.9.3 (2023-11-22)","text":""},{"location":"CHANGELOG/#whats-new_5","title":"What's New","text":"<ul> <li>Add initial client with client_secret file. Thanks for @pidi3000</li> </ul>"},{"location":"CHANGELOG/#version-092-2023-09-26","title":"Version 0.9.2 (2023-09-26)","text":""},{"location":"CHANGELOG/#whats-new_6","title":"What's New","text":"<ul> <li>Add new parameter for search method</li> <li>Mark some parameter or method to be deprecated.</li> </ul>"},{"location":"CHANGELOG/#version-091-2023-07-19","title":"Version 0.9.1 (2023-07-19)","text":""},{"location":"CHANGELOG/#whats-new_7","title":"What's New","text":"<ul> <li>upgrade poetry. Thanks for @blaggacao</li> </ul>"},{"location":"CHANGELOG/#version-090-2022-12-26","title":"Version 0.9.0 (2022-12-26)","text":""},{"location":"CHANGELOG/#whats-new_8","title":"What's New","text":"<ul> <li>Introduce new <code>Client</code> to operate YouTube DATA API. #120.</li> <li>More example to show library usage.</li> </ul>"},{"location":"CHANGELOG/#version-083-2022-10-17","title":"Version 0.8.3 (2022-10-17)","text":""},{"location":"CHANGELOG/#whats-new_9","title":"What's New","text":"<ul> <li>Add parts for video, thanks for @Omer</li> </ul>"},{"location":"CHANGELOG/#version-082-2022-03-16","title":"Version 0.8.2 (2022-03-16)","text":""},{"location":"CHANGELOG/#whats-new_10","title":"What's New","text":"<ul> <li>Update OAuthorize functions.</li> <li>Update for examples.</li> </ul>"},{"location":"CHANGELOG/#version-081-2021-05-14","title":"Version 0.8.1 (2021-05-14)","text":""},{"location":"CHANGELOG/#deprecation","title":"Deprecation","text":"<p>Detail at: https://developers.google.com/youtube/v3/revision_history#may-12,-2021</p> <ul> <li>Remove channel resource in brandingSettings for channel.</li> <li>Remove localizations,targeting resource and some snippet resource for channelSection.</li> <li>Remove tags in snippet for playlist. </li> </ul>"},{"location":"CHANGELOG/#broken-change","title":"Broken Change","text":"<p>Methods <code>get_channel_sections_by_channel</code>, <code>get_channel_section_by_id</code> has remove parameter <code>hl</code>.</p>"},{"location":"CHANGELOG/#version-080","title":"Version 0.8.0","text":""},{"location":"CHANGELOG/#broken-change_1","title":"Broken Change","text":"<p>Modify the auth flow methods.</p>"},{"location":"CHANGELOG/#whats-new_11","title":"What's New","text":"<ol> <li>add python3.9 tests</li> <li>New docs</li> </ol>"},{"location":"CHANGELOG/#version-070","title":"Version 0.7.0","text":""},{"location":"CHANGELOG/#whats-new_12","title":"What's New","text":"<ol> <li>Add api methods for members and membership levels</li> <li>Add more examples for api</li> <li>Add fields for playlist item api</li> <li>fix some.</li> </ol>"},{"location":"CHANGELOG/#version-061","title":"Version 0.6.1","text":""},{"location":"CHANGELOG/#whats-new_13","title":"What's New","text":"<p>Remove deprecated api.</p>"},{"location":"CHANGELOG/#version-060","title":"Version 0.6.0","text":""},{"location":"CHANGELOG/#whats-new_14","title":"What's New","text":"<p>Provide remain get apis. like activities, captions, channel_sections, i18n, video_abuse_report_reason, search resource and so on.</p> <p>You can see the <code>README</code>_ to get more detail for those api.</p>"},{"location":"CHANGELOG/#version-053","title":"Version 0.5.3","text":""},{"location":"CHANGELOG/#whats-new_15","title":"What's New","text":"<p>Provide the page token parameter to skip data have retrieved.</p> <p>This for follow api methods</p> <pre><code>api.get_playlists()\napi.get_playlist_items()\napi.get_videos_by_chart()\napi.get_videos_by_myrating()\napi.get_comment_threads()\napi.get_comments()\napi.get_subscription_by_channel()\napi.get_subscription_by_me()\n</code></pre> <p>example</p> <pre><code>In[1]: r = api.get_subscription_by_channel(channel_id=\"UCAuUUnT6oDeKwE6v1NGQxug\", limit=5, count=None, page_token=\"CAUQAA\")\nIn[2]:r.prevPageToken\nOut[2]: 'CAUQAQ'\n</code></pre>"},{"location":"CHANGELOG/#version-052","title":"Version 0.5.2","text":""},{"location":"CHANGELOG/#whats-new_16","title":"What's New","text":"<p>Now you can use authorized access token to get your subscriptions. You can to the demo A demo for get my subscription to see simple usage. Or you can see the subscriptions usage docs.</p> <pre><code>#43 add api for get my subscriptions\n\n#41 add api for channel subscriptions\n</code></pre>"},{"location":"CHANGELOG/#version-051","title":"Version 0.5.1","text":""},{"location":"CHANGELOG/#whats-new_17","title":"What's New","text":"<p>Now some apis can get all target items just by one method call.</p> <p>For example, you can get playlist's all items by follow call</p> <pre><code>In [1]: r = api.get_playlist_items(playlist_id=\"PLWz5rJ2EKKc_xXXubDti2eRnIKU0p7wHd\", parts=[\"id\", \"snippet\"], count=None)\nIn [2]: r.pageInfo\nOut[2]: PageInfo(totalResults=73, resultsPerPage=50)\nIn [3]: len(r.items)\nOut[4]: 73\n</code></pre> <p>You can see the README to find which methods support this.</p>"},{"location":"CHANGELOG/#version-050","title":"Version 0.5.0","text":""},{"location":"CHANGELOG/#broken-change_2","title":"Broken Change","text":"<p>Now introduce new model ApiResponse representing the response from youtube, so previous usage has been invalidated.</p> <p>You need to read the docs README to get the simple new usage.</p>"},{"location":"CHANGELOG/#whats-new_18","title":"What's New","text":"<p>Split some method into multiple usage, for example get video has been split three methods:</p> <ul> <li>api.get_video_by_id()</li> <li>api.get_videos_by_chart()</li> <li>api.get_videos_by_myrating()</li> </ul>"},{"location":"authorization/","title":"Authorization","text":"<p>If you want to get more data for your channel, You need provide the authorization.</p> <p>This doc shows how to authorize a client.</p>"},{"location":"authorization/#prerequisite","title":"Prerequisite","text":"<p>To begin with, you must know what authorization is.</p> <p>You can see some information at the Official Documentation.</p> <p>You will need to create an app with Access scope approval by YouTube.</p> <p>Once complete, you will be able to do a simple authorize with <code>Python-Youtube</code> library.</p>"},{"location":"authorization/#get-authorization-url","title":"Get authorization url","text":"<p>Suppose now we want to get user's permission to manage their YouTube account.</p> <p>For the <code>Python-YouTube</code> library, the default scopes are:</p> <ul> <li>https://www.googleapis.com/auth/youtube</li> <li>https://www.googleapis.com/auth/userinfo.profile</li> </ul> <p>You can get more scope information at Access scopes.</p> <p>(The defailt redirect URI used in PyYoutube is <code>https://localhost/</code>)</p> <p>We can now perform the following steps:</p> <p>Initialize the api instance with your app credentials</p> <pre><code>In [1]: from pyyoutube import Client\n\nIn [2]: cli = Client(client_id=\"you client id\", client_secret=\"you client secret\")\n\nIn [3]: cli.get_authorize_url()\nOut[3]:\n('https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=client_id&amp;redirect_uri=https%3A%2F%2Flocalhost%2F&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&amp;state=PyYouTube&amp;access_type=offline&amp;prompt=select_account',\n 'PyYouTube')\n</code></pre> <p>Open your broswer of choice and copy the link returned by <code>get_authorize_url()</code> into the searchbar.</p>"},{"location":"authorization/#do-authorization","title":"Do authorization","text":"<p>On entering the URL, you will see the following:</p> <p></p> <p>Select the account to authorize your app to read data from.</p> <p>If your app is not approved for use, you will recieve a warning. You can prevent this by adding your chosen Google account as a test member on your created OAuth application. Otherwise, you will see the following:</p> <p></p> <p>You will need to click <code>Advanced</code>, then click the <code>Go to Python-YouTube (unsafe)</code>.</p> <p></p> <p>You should now see a window to select permissions granted to the application.</p> <p></p> <p>Click <code>allow</code> to give the permission.</p> <p>You will see a Connection Error, as the link is redirecting to <code>localhost</code>. This is standard behaviour, so don't close the window or return to a previous page!</p>"},{"location":"authorization/#retrieve-access-token","title":"Retrieve access token","text":"<p>Copy the full redicted URL from the browser address bar, and return to your original console.</p> <pre><code>In [4]: token = cli.generate_access_token(authorization_response=\"$redirect_url\")\n\nIn [5]: token\nOut[5]: AccessToken(access_token='access token', expires_in=3600, token_type='Bearer')\n</code></pre> <p>(Replace <code>$redirect_url</code> with the URL you copied)</p> <p>You now have an access token to view your account data.</p>"},{"location":"authorization/#get-your-data","title":"Get your data","text":"<p>For example, you can get your playlists.</p> <pre><code>In [6]: playlists = cli.playlists.list(mine=True)\n\nIn [7]: playlists.items\nOut[7]:\n[Playlist(kind='youtube#playlist', id='PLBaidt0ilCManGDIKr8UVBFZwN_UvMKvS'),\n Playlist(kind='youtube#playlist', id='PLBaidt0ilCMbUdj0EppB710c_X5OuCP2g')]\n</code></pre> <p>Tips</p> <p>If you are confused, it is beneficial to read the Authorize Requests guide first.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>This document is a simple tutorial to show how to use this library to get data from YouTube data API.</p> <p>You can get the whole description for the YouTube API at YouTube API Reference.</p>"},{"location":"getting_started/#prerequisite","title":"Prerequisite","text":"<p>To begin, you need to create a Google Project with your google account.</p> <p>Every new account has a free quota of 12 projects.</p>"},{"location":"getting_started/#create-your-project","title":"Create your project","text":"<p>Click <code>Select a project-&gt; NEW PROJECT</code> to create a new project to use our library.</p> <p>Fill in the basic info and create the project.</p> <p></p>"},{"location":"getting_started/#enable-youtube-data-api-service","title":"Enable YouTube DATA API service","text":"<p>Once the project created, the browser will redirect you to the project home page.</p> <p>Click the <code>\u2261\u2261</code> symbol on the top left and select the <code>APIs &amp; Services</code> tab.</p> <p>You will see following info:</p> <p></p> <p>Click the <code>+ ENABLE APIS AND SERVICES</code> symbol, and input <code>YouTube DATA API</code> to search.</p> <p></p> <p>Chose the <code>YouTube DATA API</code> item.</p> <p></p> <p>Then click the <code>ENABLE</code> blue button. After a short period where the API is added to your project, the service will be activated.</p>"},{"location":"getting_started/#create-credentials","title":"Create credentials","text":"<p>To use this API, you need credentials. Click <code>Create credentials</code> to get started.</p> <p></p> <p>You need to fill in some information to create credentials.</p> <p>Just chose <code>YouTube DATA API v3</code>, <code>Other non-UI (e.g. cron job, daemon)</code> and <code>Public data</code>.</p> <p>Then click the blue button <code>What credentials do I need?</code> to create.</p> <p></p> <p>You have now generated an api key.</p> <p>Using this key, you can retrieve public YouTube data with our library</p> <pre><code>from pyyoutube import Client\n\ncli = Client(api_key=\"your api key\")\n</code></pre> <p>Check out the examples directory for some examples of using the library.</p> <p>If you have an open source application using python-youtube, send me a link. I am very happy to add a link to it here.</p> <p>If you want to get user data by OAuth. You need create the credential for <code>OAuth client ID</code>.</p> <p>You will find more information on OAth at the Authorization page.</p>"},{"location":"installation/","title":"Installation","text":"<p>This library supports Python 3.6 and newer.</p>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>These following distributions will be installed automatically when installing Python-Youtube.</p> <ul> <li>requests: is an elegant and simple HTTP library for Python, built for human beings.</li> <li>Requests-OAuthlib: uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients.</li> <li>isodate: implements ISO 8601 date, time and duration parsing.</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>You can install this library from PyPI</p> <pre><code>$ pip install --upgrade python-youtube\n</code></pre> <p>You can also build this library from source</p> <pre><code>$ git clone https://github.com/sns-sdks/python-youtube.git\n$ cd python-youtube\n$ make env\n$ make build\n</code></pre>"},{"location":"installation/#testing","title":"Testing","text":"<p>Run <code>make env</code> after you have installed the project requirements. Once completed, you can run code tests with</p> <pre><code>$ make tests-html\n</code></pre>"},{"location":"introduce-new-structure/","title":"Introduce Structure","text":"<p>This doc will show you the new api structure for this library.</p>"},{"location":"introduce-new-structure/#brief","title":"Brief","text":"<p>To make the package easier to maintain and easy to use. We have shifted to using classes for different YouTube resources in an easier, higher-level, programming experience.</p> <p></p> <p>In this structure, every resource has a self class.</p>"},{"location":"introduce-new-structure/#simple-usage","title":"Simple usage","text":""},{"location":"introduce-new-structure/#initial-client","title":"Initial Client","text":"<pre><code>from pyyoutube import Client\n\nclient = Client(api_key=\"your api key\")\n</code></pre>"},{"location":"introduce-new-structure/#get-data","title":"Get data.","text":"<p>for example to get channel data.</p> <pre><code>resp = client.channels.list(\n    parts=[\"id\", \"snippet\"],\n    channel_id=\"UCa-vrCLQHviTOVnEKDOdetQ\"    \n)\n# resp output\n# ChannelListResponse(kind='youtube#channelListResponse')\n# resp.items[0].id  output\n# UCa-vrCLQHviTOVnEKDOdetQ\n</code></pre>"},{"location":"usage/work-with-api/","title":"Work with Api","text":"<p>Tips</p> <p>This is the previous version to operate YouTube DATA API.</p> <p>We recommend using the latest version of methods to operate YouTube DATA API.</p> <p>The API is exposed via the <code>pyyoutube.Api</code> class.</p>"},{"location":"usage/work-with-api/#instantiate","title":"INSTANTIATE","text":"<p>We provide two method to create instances of the <code>pyyoutube.Api</code>.</p> <p>You can just initialize with an api key.</p> <pre><code>&gt;&gt;&gt; from pyyoutube import Api\n\n&gt;&gt;&gt; api = Api(api_key=\"your api key\")\n</code></pre> <p>If you want to get authorization data, you will need to initialize with an access token.</p> <pre><code>&gt;&gt;&gt; from pyyoutube import Api\n\n&gt;&gt;&gt; api = Api(access_token='your api key')\n</code></pre> <p>You can read the docs to see how to get an access token.</p> <p>Or you can ask for the user to do oauth flow:</p> <pre><code>&gt;&gt;&gt; from pyyoutube import Api\n\n&gt;&gt;&gt; api = Api(client_id=\"client key\", client_secret=\"client secret\")\n# Get authorization url\n&gt;&gt;&gt; api.get_authorization_url()\n# ('https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=id&amp;redirect_uri=https%3A%2F%2Flocalhost%2F&amp;scope=scope&amp;state=PyYouTube&amp;access_type=offline&amp;prompt=select_account', 'PyYouTube')\n# user to do\n# copy the response url\n&gt;&gt;&gt; api.generate_access_token(authorization_response=\"link for response\")\n# AccessToken(access_token='token', expires_in=3599, token_type='Bearer')\n</code></pre>"},{"location":"usage/work-with-api/#usage","title":"Usage","text":"<p>Now you can use the instance to get data from YouTube.</p>"},{"location":"usage/work-with-api/#channel-data","title":"CHANNEL DATA","text":"<p>The library provides several ways to get a channels data.</p> <p>If a channel is not found, the property <code>items</code> will return an empty list.</p> <p>You can use channel id:</p> <pre><code>&gt;&gt;&gt; channel_by_id = api.get_channel_info(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\")\n&gt;&gt;&gt; channel_by_id.items\n[Channel(kind='youtube#channel', id='UC_x5XG1OV2P6uZZ5FSM9Ttw')]\n&gt;&gt;&gt; channel_by_id.items[0].to_dict()\n{'kind': 'youtube#channel',\n 'etag': '\"j6xRRd8dTPVVptg711_CSPADRfg/AW8QEqbNRoIJv9KuzCIg0CG6aJA\"',\n 'id': 'UC_x5XG1OV2P6uZZ5FSM9Ttw',\n 'snippet': {'title': 'Google Developers',\n  'description': 'The Google Developers channel features talks from events, educational series, best practices, tips, and the latest updates across our products and platforms.',\n  'customUrl': 'googlecode',\n  'publishedAt': '2007-08-23T00:34:43.000Z',\n  'thumbnails': {'default': {'url': 'https://yt3.ggpht.com/a/AGF-l78iFtAxyRZcUBzG91kbKMES19z-zGW5KT20_g=s88-c-k-c0xffffffff-no-rj-mo',\n    'width': 88,\n    'height': 88},\n   'medium': {'url': 'https://yt3.ggpht.com/a/AGF-l78iFtAxyRZcUBzG91kbKMES19z-zGW5KT20_g=s240-c-k-c0xffffffff-no-rj-mo',\n    'width': 240,\n    'height': 240},\n   'high': {'url': 'https://yt3.ggpht.com/a/AGF-l78iFtAxyRZcUBzG91kbKMES19z-zGW5KT20_g=s800-c-k-c0xffffffff-no-rj-mo',\n    'width': 800,\n    'height': 800},\n   'standard': None,\n   'maxres': None},\n  'defaultLanguage': None,\n  'localized': {'title': 'Google Developers',\n   'description': 'The Google Developers channel features talks from events, educational series, best practices, tips, and the latest updates across our products and platforms.'},\n  'country': 'US'},\n  ...\n  }\n</code></pre> <p>To get multiple channels, you can pass any of: a string containing comma-seperated ids; or an enumarable (list, tuple, or set) of ids</p> <p>Many other methods also provide this functionality.</p> <p>with ids:</p> <pre><code>&gt;&gt;&gt; channel_by_ids = api.get_channel_info(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw,UCa-vrCLQHviTOVnEKDOdetQ\")\n&gt;&gt;&gt; channel_by_ids.items\n[Channel(kind='youtube#channel', id='UC_x5XG1OV2P6uZZ5FSM9Ttw'),\n Channel(kind='youtube#channel', id='UCa-vrCLQHviTOVnEKDOdetQ')]\n</code></pre> <p>You can also use a channel name:</p> <pre><code>&gt;&gt;&gt; channel_by_username = api.get_channel_info(for_username=\"GoogleDevelopers\")\n&gt;&gt;&gt; channel_by_username.items[0]\nChannel(kind='youtube#channel', id='UC_x5XG1OV2P6uZZ5FSM9Ttw')\n</code></pre> <p>If you have authorized your client, you can get your channels directly:</p> <pre><code>&gt;&gt;&gt; channel_by_mine = api_with_authorization.get_channel_info(mine=True)\n&gt;&gt;&gt; channel_by_mine.items[0]\nChannel(kind='youtube#channel', id='UCa-vrCLQHviTOVnEKDOdetQ')\n</code></pre> <p>Tips</p> <p>To get your channel, you must do authorization first, otherwise you will get an error.</p>"},{"location":"usage/work-with-api/#playlist","title":"PLAYLIST","text":"<p>There are methods to get playlists by playlist id, channel id, or get your own playlists.</p> <p>Get playlists by id:</p> <pre><code>&gt;&gt;&gt; playlists_by_id = api.get_playlist_by_id(playlist_id=\"PLOU2XLYxmsIKpaV8h0AGE05so0fAwwfTw\")\n&gt;&gt;&gt; playlists_by_id.items\n[Playlist(kind='youtube#playlist', id='PLOU2XLYxmsIKpaV8h0AGE05so0fAwwfTw')]\n</code></pre> <p>Get playlists by channel (If you want to get all playlists for the target channels, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; playlists_by_channel = api.get_playlists(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\")\n&gt;&gt;&gt; playlists_by_channel.items\n[Playlist(kind='youtube#playlist', id='PLOU2XLYxmsIKpaV8h0AGE05so0fAwwfTw'),\n Playlist(kind='youtube#playlist', id='PLOU2XLYxmsIJO83u2UmyC8ud41AvUnhgj'),\n Playlist(kind='youtube#playlist', id='PLOU2XLYxmsILfV1LiUhDjbh1jkFjQWrYB'),\n Playlist(kind='youtube#playlist', id='PLOU2XLYxmsIKNr3Wfhm8o0TSojW7hEPPY'),\n Playlist(kind='youtube#playlist', id='PLOU2XLYxmsIJ8ItHmK4bRlY4GCzMgXLAJ')]\n</code></pre> <p>Get your playlists (this requires authorization):</p> <pre><code>&gt;&gt;&gt; playlists_by_mine = api.get_playlists(mine=True)\n</code></pre>"},{"location":"usage/work-with-api/#playlist-item","title":"PLAYLIST ITEM","text":"<p>Similarly, you can get playlist items by playlist item id or playlist id.</p> <p>Get playlist items by id:</p> <pre><code>&gt;&gt;&gt; playlist_item_by_id = api.get_playlist_item_by_id(playlist_item_id=\"UExPVTJYTFl4bXNJS3BhVjhoMEFHRTA\"\n...     \"1c28wZkF3d2ZUdy41NkI0NEY2RDEwNTU3Q0M2\")\n\n&gt;&gt;&gt; playlist_item_by_id.items\n[PlaylistItem(kind='youtube#playlistItem', id='UExPVTJYTFl4bXNJS3BhVjhoMEFHRTA1c28wZkF3d2ZUdy41NkI0NEY2RDEwNTU3Q0M2')]\n</code></pre> <p>Get playlist items by playlist id (If you want to get return all items in a playlist, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; playlist_item_by_playlist = api.get_playlist_items(playlist_id=\"PLOU2XLYxmsIKpaV8h0AGE05so0fAwwfTw\", count=2)\n\n&gt;&gt;&gt; playlist_item_by_playlist.items\n[PlaylistItem(kind='youtube#playlistItem', id='UExPVTJYTFl4bXNJS3BhVjhoMEFHRTA1c28wZkF3d2ZUdy41NkI0NEY2RDEwNTU3Q0M2'),\n PlaylistItem(kind='youtube#playlistItem', id='UExPVTJYTFl4bXNJS3BhVjhoMEFHRTA1c28wZkF3d2ZUdy4yODlGNEE0NkRGMEEzMEQy')]\n&gt;&gt;&gt; playlist_item_by_id.items[0].snippet.resourceId\nResourceId(kind='youtube#video', videoId='CvTApw9X8aA')\n</code></pre>"},{"location":"usage/work-with-api/#video","title":"VIDEO","text":"<p>You can get a video's information by several methods.</p> <p>Get videos by video id(s):</p> <pre><code>&gt;&gt;&gt; video_by_id = api.get_video_by_id(video_id=\"CvTApw9X8aA\")\n\n&gt;&gt;&gt; video_by_id\nVideoListResponse(kind='youtube#videoListResponse')\n\n&gt;&gt;&gt; video_by_id.items\n[Video(kind='youtube#video', id='CvTApw9X8aA')]\n</code></pre> <p>Get videos by chart (If you want to get all videos, just provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; video_by_chart = api.get_videos_by_chart(chart=\"mostPopular\", region_code=\"US\", count=2)\n\n&gt;&gt;&gt; video_by_chart.items\n[Video(kind='youtube#video', id='RwnN2FVaHmw'),\n Video(kind='youtube#video', id='hDeuSfo_Ys0')]\n</code></pre> <p>Get videos by your rating (this requires authorization. If you also want to get all videos, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; videos_by_rating = api.get_videos_by_myrating(rating=\"like\", count=2)\n</code></pre>"},{"location":"usage/work-with-api/#comment-thread","title":"COMMENT THREAD","text":"<p>You can get comment thread information by id or by a filter.</p> <p>Get comment thread by id(s):</p> <pre><code>&gt;&gt;&gt; ct_by_id = api.get_comment_thread_by_id(comment_thread_id='Ugz097FRhsQy5CVhAjp4AaABAg,UgzhytyP79_Pwa\n... Dd4UB4AaABAg')\n\n&gt;&gt;&gt; ct_by_id.items\n[CommentThread(kind='youtube#commentThread', id='Ugz097FRhsQy5CVhAjp4AaABAg'),\n CommentThread(kind='youtube#commentThread', id='UgzhytyP79_PwaDd4UB4AaABAg')]\n</code></pre> <p>Get all comment threads related to a channel (including comment threads for the channel's video. If you want to get all comment threads, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; ct_by_all = api.get_comment_threads(all_to_channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\", count=2)\n\n&gt;&gt;&gt; ct_by_all.items\n[CommentThread(kind='youtube#commentThread', id='UgwlB_Cza9WtzUWahYN4AaABAg'),\n CommentThread(kind='youtube#commentThread', id='UgyvoQJ2LsxCBwGEpMB4AaABAg')]\n</code></pre> <p>Get comment threads only for the channel (If you want to get all comment threads, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; ct_by_channel = api.get_comment_threads(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\", count=2)\n\n&gt;&gt;&gt; ct_by_channel.items\n[CommentThread(kind='youtube#commentThread', id='UgyUBI0HsgL9emxcZpR4AaABAg'),\n CommentThread(kind='youtube#commentThread', id='Ugzi3lkqDPfIOirGFLh4AaABAg')]\n</code></pre> <p>Get comment threads only for the video (If you want to get all comment threads, provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; ct_by_video = api.get_comment_threads(video_id=\"D-lhorsDlUQ\", count=2)\n\n&gt;&gt;&gt; ct_by_video.items\n[CommentThread(kind='youtube#commentThread', id='UgydxWWoeA7F1OdqypJ4AaABAg'),\n CommentThread(kind='youtube#commentThread', id='UgxKREWxIgDrw8w2e_Z4AaABAg')]\n</code></pre>"},{"location":"usage/work-with-api/#comment","title":"COMMENT","text":"<p>You can get comment information by id or use the top-level comment id to get replies.</p> <p>Tips</p> <p>The reply has the same structure as a comment.</p> <p>Get comments by id(s):</p> <pre><code>&gt;&gt;&gt; comment_by_id = api.get_comment_by_id(comment_id='UgxKREWxIgDrw8w2e_Z4AaABAg,UgyrVQaFfEdvaSzstj14AaABAg')\n\n&gt;&gt;&gt; comment_by_id.items\n[Comment(kind='youtube#comment', id='UgxKREWxIgDrw8w2e_Z4AaABAg', snippet=CommentSnippet(authorDisplayName='Hieu Nguyen', likeCount=0)),\n Comment(kind='youtube#comment', id='UgyrVQaFfEdvaSzstj14AaABAg', snippet=CommentSnippet(authorDisplayName='Mani Kanta', likeCount=0))]\n</code></pre> <p>Get replies by comment id (If you want to get all comments, just provide the parameter <code>count=None</code>):</p> <pre><code>&gt;&gt;&gt; comment_by_parent = api.get_comments(parent_id=\"UgwYjZXfNCUTKPq9CZp4AaABAg\")\n&gt;&gt;&gt; comment_by_parent.items\n[Comment(kind='youtube#comment', id='UgwYjZXfNCUTKPq9CZp4AaABAg.8yxhlQJogG18yz_cXK9Kcj', snippet=CommentSnippet(authorDisplayName='Marlon L\u00f3pez', likeCount=0))]\n</code></pre>"},{"location":"usage/work-with-api/#video-category","title":"VIDEO CATEGORY","text":"<p>You can get video category with id or region.</p> <p>Get video categories with id(s):</p> <pre><code>&gt;&gt;&gt; video_category_by_id = api.get_video_categories(category_id=\"17,18\")\n\n&gt;&gt;&gt; video_category_by_id.items\n[VideoCategory(kind='youtube#videoCategory', id='17'),\n VideoCategory(kind='youtube#videoCategory', id='18')]\n</code></pre> <p>Get video categories with region code:</p> <pre><code>&gt;&gt;&gt; video_categories_by_region = api.get_video_categories(region_code=\"US\")\n\n&gt;&gt;&gt; video_categories_by_region.items\n[VideoCategory(kind='youtube#videoCategory', id='1'),\n VideoCategory(kind='youtube#videoCategory', id='2'),\n VideoCategory(kind='youtube#videoCategory', id='10'),\n VideoCategory(kind='youtube#videoCategory', id='15'),\n ...]\n</code></pre>"},{"location":"usage/work-with-api/#subscriptions","title":"SUBSCRIPTIONS","text":"<p>You can get subscription information by id, by point channel, or your own.</p> <p>Tips</p> <p>If you want to get the non-public subscriptions, you need to authorize and obtain the access token first. See the demo A demo for get my subscription.</p> <p>To get subscription info by id(s), your token needs to have the permission for the subscriptions belonging to a channel or user:</p> <pre><code>&gt;&gt;&gt; r = api.get_subscription_by_id(\n...         subscription_id=[\n...             \"zqShTXi-2-Tx7TtwQqhCBwViE_j9IEgnmRmPnqJljxo\",\n...             \"zqShTXi-2-Rya5uUxEp3ZsPI3fZrFQnSXNQCwvHBGGo\"])\n&gt;&gt;&gt; r\nSubscriptionListResponse(kind='youtube#subscriptionListResponse')\n&gt;&gt;&gt; r.items\n[Subscription(kind='youtube#subscription', id='zqShTXi-2-Tx7TtwQqhCBwViE_j9IEgnmRmPnqJljxo', snippet=SubscriptionSnippet(title='PyCon 2015', description='')),\n Subscription(kind='youtube#subscription', id='zqShTXi-2-Rya5uUxEp3ZsPI3fZrFQnSXNQCwvHBGGo', snippet=SubscriptionSnippet(title='ikaros-life', description='This is a test channel.'))]\n</code></pre> <p>Get your own subscriptions, you need to authorize first, and supply the token:</p> <pre><code>&gt;&gt;&gt; r = api.get_subscription_by_me(\n...         mine=True,\n...         parts=[\"id\", \"snippet\"],\n...         count=2\n... )\n&gt;&gt;&gt; r\nSubscriptionListResponse(kind='youtube#subscriptionListResponse')\n&gt;&gt;&gt; r.items\n[Subscription(kind='youtube#subscription', id='zqShTXi-2-Tx7TtwQqhCBwtJ-Aho6DZeutqZiP4Q79Q', snippet=SubscriptionSnippet(title='Next Day Video', description='')),\n Subscription(kind='youtube#subscription', id='zqShTXi-2-Tx7TtwQqhCBwViE_j9IEgnmRmPnqJljxo', snippet=SubscriptionSnippet(title='PyCon 2015', description=''))]\n</code></pre> <p>Get public channel subscriptions:</p> <pre><code>&gt;&gt;&gt; r = api.get_subscription_by_channel(\n...      channel_id=\"UCAuUUnT6oDeKwE6v1NGQxug\",\n...      parts=\"id,snippet\",\n...      count=2\n... )\n&gt;&gt;&gt; r\nSubscriptionListResponse(kind='youtube#subscriptionListResponse')\n&gt;&gt;&gt; r.items\n[Subscription(kind='youtube#subscription', id='FMP3Mleijt-52zZDGkHtR5KhwkvCcdQKWWWIA1j5eGc', snippet=SubscriptionSnippet(title='TEDx Talks', description=\"TEDx is an international community that organizes TED-style events anywhere and everywhere -- celebrating locally-driven ideas and elevating them to a global stage. TEDx events are produced independently of TED conferences, each event curates speakers on their own, but based on TED's format and rules.\\n\\nFor more information on using TED for commercial purposes (e.g. employee learning, in a film, or in an online course), please submit a media request using the link below.\")),\n Subscription(kind='youtube#subscription', id='FMP3Mleijt_ZKvy5M-HhRlsqI4wXY7VmP5g8lvmRhVU', snippet=SubscriptionSnippet(title='TED Residency', description='The TED Residency program is an incubator for breakthrough ideas. It is free and open to all via a semi-annual competitive application. Those chosen as TED Residents spend four months at TED headquarters in New York City, working on their idea. Selection criteria include the strength of their idea, their character, and their ability to bring a fresh perspective and positive contribution to the diverse TED community.'))]\n</code></pre>"},{"location":"usage/work-with-api/#activities","title":"ACTIVITIES","text":"<p>You can get activities by channel id. You can also get your own activities after you have completed authorization.</p> <p>Get public channel activities:</p> <pre><code>&gt;&gt;&gt; r = api.get_activities_by_channel(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\", count=2)\n&gt;&gt;&gt; r\nActivityListResponse(kind='youtube#activityListResponse')\n&gt;&gt;&gt; r.items\n[Activity(kind='youtube#activity', id='MTUxNTc3NzM2MDAyODIxOTQxNDM0NjAwMA==', snippet=ActivitySnippet(title='2019 Year in Review - The Developer Show', description='Here to bring you the latest developer news from across Google this year is Developer Advocate Timothy Jordan. In this last week of the year, we\u2019re taking a look back at some of the coolest and biggest announcements we covered in 2019! \\n\\nFollow Google Developers on Instagram \u2192 https://goo.gle/googledevs\\n\\nWatch more #DevShow \u2192 https://goo.gle/GDevShow\\nSubscribe to Google Developers \u2192 https://goo.gle/developers')),\n Activity(kind='youtube#activity', id='MTUxNTc3MTI4NzIzODIxOTQxNDM0NzI4MA==', snippet=ActivitySnippet(title='GDE Promo - Lara Martin', description='Meet Lara Martin, a Flutter/Dart Google Developers Expert and get inspired by her journey. Watch now for a preview of her story! #GDESpotlights #IncludedWithGoogle\\n\\nLearn about the GDE program \u2192 https://goo.gle/2qWOvAy\\n\\nGoogle Developers Experts \u2192 https://goo.gle/GDE\\nSubscribe to Google Developers \u2192 https://goo.gle/developers'))]\n</code></pre> <p>Get your activities:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.get_activities_by_me()\n&gt;&gt;&gt; r.items\n[Activity(kind='youtube#activity', id='MTUxNTc0OTk2MjI3NDE0MjYwMDY1NjAwODA=', snippet=ActivitySnippet(title='\u534e\u5c71\u65e5\u51fa', description='\u51b7\u51b7\u7684\u5c71\u5934')),\n Activity(kind='youtube#activity', id='MTUxNTc0OTk1OTAyNDE0MjYwMDY1NTc2NDg=', snippet=ActivitySnippet(title='\u6d77\u4e0a\u65e5\u51fa', description='\u7f8e\u7f8e\u7f8e'))]\n</code></pre> <p>Get your video captions:</p> <pre><code>&gt;&gt;&gt; r = api.get_captions_by_video(video_id=\"oHR3wURdJ94\", parts=[\"id\", \"snippet\"])\n&gt;&gt;&gt; r\nCaptionListResponse(kind='youtube#captionListResponse')\n&gt;&gt;&gt; r.items\n[Caption(kind='youtube#caption', id='SwPOvp0r7kd9ttt_XhcHdZthMwXG7Z0I', snippet=CaptionSnippet(videoId='oHR3wURdJ94', lastUpdated='2020-01-14T09:40:49.981Z')),\n Caption(kind='youtube#caption', id='fPMuDm722CIRcUAT3NTPQHQZJZJxt39kU7JvrHk8Kzs=', snippet=CaptionSnippet(videoId='oHR3wURdJ94', lastUpdated='2020-01-14T09:39:46.991Z'))]\n</code></pre> <p>If you already have caption id(s), you can get video caption by id(s):</p> <pre><code>&gt;&gt;&gt; r = api.get_captions_by_video(video_id=\"oHR3wURdJ94\", parts=[\"id\", \"snippet\"], caption_id=\"SwPOvp0r7kd9ttt_XhcHdZthMwXG7Z0I\")\n&gt;&gt;&gt; r\nCaptionListResponse(kind='youtube#captionListResponse')\n&gt;&gt;&gt; r.items\n[Caption(kind='youtube#caption', id='SwPOvp0r7kd9ttt_XhcHdZthMwXG7Z0I', snippet=CaptionSnippet(videoId='oHR3wURdJ94', lastUpdated='2020-01-14T09:40:49.981Z'))]\n</code></pre>"},{"location":"usage/work-with-api/#channel-sections","title":"CHANNEL SECTIONS","text":"<p>You can get channel sections by channel id, section id, or your own channel.</p> <p>Get channel sections by channel id:</p> <pre><code>&gt;&gt;&gt; r = api.get_channel_sections_by_channel(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\")\n&gt;&gt;&gt;&gt; r\nChannelSectionResponse(kind='youtube#channelSectionListResponse')\n&gt;&gt;&gt; r.items\n[ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.e-Fk7vMPqLE'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.B8DTd9ZXJqM'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.MfvRjkWLxgk'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.fEjJOXRoWwg'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.PvTmxDBxtLs'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.pmcIOsL7s98'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.c3r3vYf9uD0'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.ZJpkBl-mXfM'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.9_wU0qhEPR8'),\n ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.npYvuMz0_es')]\n</code></pre> <p>Get authorized user's channel sections:</p> <pre><code>&gt;&gt;&gt; r = api.get_channel_sections_by_channel(mine=True)\n&gt;&gt;&gt; r.items\n[ChannelSection(kind='youtube#channelSection', id='UCa-vrCLQHviTOVnEKDOdetQ.jNQXAC9IVRw'),\n ChannelSection(kind='youtube#channelSection', id='UCa-vrCLQHviTOVnEKDOdetQ.LeAltgu_pbM'),\n ChannelSection(kind='youtube#channelSection', id='UCa-vrCLQHviTOVnEKDOdetQ.nGzAI5pLbMY')]\n</code></pre> <p>Get channel section detail info by id:</p> <pre><code>&gt;&gt;&gt; r = api.get_channel_section_by_id(section_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw.e-Fk7vMPqLE\")\n&gt;&gt;&gt; r\nChannelSectionResponse(kind='youtube#channelSectionListResponse')\n&gt;&gt;&gt; r1.items\n[ChannelSection(kind='youtube#channelSection', id='UC_x5XG1OV2P6uZZ5FSM9Ttw.e-Fk7vMPqLE')]\n</code></pre>"},{"location":"usage/work-with-api/#i18n-resource","title":"I18N RESOURCE","text":"<p>You can get a list of content regions that the YouTube website supports:</p> <pre><code>&gt;&gt;&gt; r = api.get_i18n_regions(parts=[\"snippet\"])\n&gt;&gt;&gt; r.items\n[I18nRegion(kind='youtube#i18nRegion', id='DZ', snippet=I18nRegionSnippet(gl='DZ', name='Algeria')),\n I18nRegion(kind='youtube#i18nRegion', id='AR', snippet=I18nRegionSnippet(gl='AR', name='Argentina')),\n I18nRegion(kind='youtube#i18nRegion', id='AU', snippet=I18nRegionSnippet(gl='AU', name='Australia'))\n ...]\n</code></pre> <p>You can get a list of application languages that the YouTube website supports:</p> <pre><code>&gt;&gt;&gt; r = api.get_i18n_languages(parts=[\"snippet\"])\n&gt;&gt;&gt; r.items\n[I18nLanguage(kind='youtube#i18nLanguage', id='af', snippet=I18nLanguageSnippet(hl='af', name='Afrikaans')),\n I18nLanguage(kind='youtube#i18nLanguage', id='az', snippet=I18nLanguageSnippet(hl='az', name='Azerbaijani')),\n I18nLanguage(kind='youtube#i18nLanguage', id='id', snippet=I18nLanguageSnippet(hl='id', name='Indonesian')),\n ...]\n</code></pre>"},{"location":"usage/work-with-api/#member","title":"MEMBER","text":"<p>The API request must be authorized by the channel owner.</p> <p>You can retrieve a list of members (formerly known as \"sponsors\") for a channel:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.get_members(parts=[\"snippet\"])\n&gt;&gt;&gt; r.items\n[MemberListResponse(kind='youtube#memberListResponse'),\n MemberListResponse(kind='youtube#memberListResponse')]\n</code></pre>"},{"location":"usage/work-with-api/#membership-level","title":"MEMBERSHIP LEVEL","text":"<p>The API request must be authorized by the channel owner.</p> <p>You can retrieve a list membership levels for a channel:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.get_membership_levels(parts=[\"snippet\"])\n&gt;&gt;&gt; r.items\n[MembershipsLevelListResponse(kind='youtube#membershipsLevelListResponse'),\n MembershipsLevelListResponse(kind='youtube#membershipsLevelListResponse')]\n</code></pre>"},{"location":"usage/work-with-api/#video-abuse-report-reason","title":"VIDEO ABUSE REPORT REASON","text":"<p>You can retrieve a list of reasons that can be used to report abusive videos:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.get_video_abuse_report_reason(parts=[\"snippet\"])\n&gt;&gt;&gt; r.items\n[VideoAbuseReportReason(kind='youtube#videoAbuseReportReason'),\n VideoAbuseReportReason(kind='youtube#videoAbuseReportReason')]\n</code></pre>"},{"location":"usage/work-with-api/#search","title":"SEARCH","text":"<p>You can use those methods to search the video, playlist, or channel data. For more info, you can see the Search Request Docs.</p> <p>You can search different type of resource with keywords:</p> <pre><code>&gt;&gt;&gt; r = api.search_by_keywords(q=\"surfing\", search_type=[\"channel\",\"video\", \"playlist\"], count=5, limit=5)\n&gt;&gt;&gt; r.items\n[SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult')]\n</code></pre> <p>You can search your app send videos:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.search_by_developer(q=\"news\", count=1)\n&gt;&gt;&gt; r.items\n[SearchResult(kind='youtube#searchResult')]\n</code></pre> <p>You can search your videos:</p> <pre><code>&gt;&gt;&gt; r = api_with_token.search_by_mine(q=\"news\", count=1)\n&gt;&gt;&gt; r.items\n[SearchResult(kind='youtube#searchResult')]\n</code></pre> <p>Or you can build your request using the <code>search</code> method:</p> <pre><code>&gt;&gt;&gt; r = api.search(\n...     location=\"21.5922529, -158.1147114\",\n...     location_radius=\"10mi\",\n...     q=\"surfing\",\n...     parts=[\"snippet\"],\n...     count=5,\n...     published_after=\"2020-02-01T00:00:00Z\",\n...     published_before=\"2020-03-01T00:00:00Z\",\n...     safe_search=\"moderate\",\n...     search_type=\"video\")\n&gt;&gt;&gt; r.items\n[SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult')]\n\n&gt;&gt;&gt; r = api.search(\n...     event_type=\"live\",\n...     q=\"news\",\n...     count=3,\n...     parts=[\"snippet\"],\n...     search_type=\"video\",\n...     topic_id=\"/m/09s1f\",\n...     order=\"viewCount\")\n&gt;&gt;&gt; r.items\n[SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult'),\n SearchResult(kind='youtube#searchResult')]\n</code></pre>"},{"location":"usage/work-with-client/","title":"Work with Client","text":"<p>We have refactored the project code to support more methods and improve code usability.</p> <p>And new structure like follows.</p> <p></p> <p>In this structure, we identify each entity as a class of resources and perform operations on the resources.</p>"},{"location":"usage/work-with-client/#instantiate","title":"INSTANTIATE","text":"<p>Client is exposed via the <code>pyyoutube.Client</code> class.</p> <p>You can initialize it with <code>api key</code>, to get public data.</p> <pre><code>from pyyoutube import Client\n\ncli = Client(api_key=\"your api key\")\n</code></pre> <p>If you want to update your channel data. or upload video. You need to initialize with <code>access token</code>, or do the auth flow.</p> <pre><code>from pyyoutube import Client\n\ncli = Client(access_token=\"Access Token with permissions\")\n</code></pre> <pre><code>from pyyoutube import Client\n\ncli = Client(client_id=\"ID for app\", client_secret=\"Secret for app\")\n# Get authorization url\ncli.get_authorize_url()\n# ('https://accounts.google.com/o/oauth2/v2/auth?response_type=code&amp;client_id=id&amp;redirect_uri=https%3A%2F%2Flocalhost%2F&amp;scope=scope&amp;state=PyYouTube&amp;access_type=offline&amp;prompt=select_account', 'PyYouTube')\n# Click url and give permissions.\n# Copy the redirected url.\ncli.generate_access_token(authorization_response=\"redirected url\")\n# AccessToken(access_token='token', expires_in=3599, token_type='Bearer')\n</code></pre>"},{"location":"usage/work-with-client/#from-client_secret","title":"from client_secret","text":"<p>Only <code>web</code> and some <code>installed</code> type client_secrets are supported.</p> <p>The fields <code>client_id</code> and <code>client_secret</code> must be set.</p> <p><code>Client.DEFAULT_REDIRECT_URI</code> will be set the first entry of the field <code>redirect_uris</code>.</p> <pre><code>from pyyoutube import Client\n\nfile_path = \"path/to/client_secret.json\"\ncli = Client(client_secret_path=file_path)\n\n# Then go through auth flow descriped above\n</code></pre> <p>Once initialize to the client, you can operate the API to get data.</p>"},{"location":"usage/work-with-client/#usage","title":"Usage","text":""},{"location":"usage/work-with-client/#channel-resource","title":"Channel Resource","text":"<p>The API supports the following methods for the <code>channels</code> resources:</p> <ul> <li>list: Returns a collection of zero or more channel resources that match the request criteria.</li> <li>update: Updates a channel's metadata. Note that this method currently only supports updates to the channel resource's   brandingSettings and invideoPromotion objects and their child properties</li> </ul>"},{"location":"usage/work-with-client/#list-channel-data","title":"List channel data","text":"<pre><code>resp = cli.channels.list(channel_id=\"UC_x5XG1OV2P6uZZ5FSM9Ttw\")\n# ChannelListResponse(kind='youtube#channelListResponse')\nprint(resp.items)\n# [Channel(kind='youtube#channel', id='UC_x5XG1OV2P6uZZ5FSM9Ttw')]\n</code></pre>"},{"location":"usage/work-with-client/#update-channel-metadata","title":"update channel metadata","text":"<pre><code>import pyyoutube.models as mds\n\nbody = mds.Channel(\n    id=\"channel id\",\n    brandingSettings=mds.ChannelBrandingSetting(\n        image=mds.ChannelBrandingSettingImage(\n            bannerExternalUrl=\"new banner url\"\n        )\n    )\n)\n\nchannel = cli.channels.update(\n    part=\"brandingSettings\",\n    body=body\n)\nprint(channel.brandingSettings.image.bannerExternalUrl)\n# 'https://yt3.googleusercontent.com/AegVxoIusdXEmsJ9j3bcJR3zuImOd6TngNw58iJAP0AOAXCnb1xHPcuEDOQC8J85SCZvt5i8A_g'\n</code></pre>"},{"location":"usage/work-with-client/#video-resource","title":"Video Resource","text":"<p>The API supports the following methods for <code>videos</code> resources.</p>"},{"location":"usage/work-with-client/#getrating","title":"getRating","text":"<p>Retrieves the ratings that the authorized user gave to a list of specified videos.</p> <pre><code>resp = cli.videos.get_rating(video_id=\"Z56Jmr9Z34Q\")\n\nprint(resp.items)\n# [VideoRatingItem(videoId='Z56Jmr9Z34Q', rating='none')]\n</code></pre>"},{"location":"usage/work-with-client/#list","title":"list","text":"<p>Returns a list of videos that match the API request parameters.</p> <pre><code>resp = cli.videos.list(video_id=\"Z56Jmr9Z34Q\")\n\nprint(resp.items)\n# [Video(kind='youtube#video', id='Z56Jmr9Z34Q')]\n</code></pre>"},{"location":"usage/work-with-client/#insert","title":"insert","text":"<p>Uploads a video to YouTube and optionally sets the video's metadata.</p> <pre><code>import pyyoutube.models as mds\nfrom pyyoutube.media import Media\n\nbody = mds.Video(\n    snippet=mds.VideoSnippet(\n        title=\"video title\",\n        description=\"video description\"\n    )\n)\n\nmedia = Media(filename=\"video.mp4\")\n\nupload = cli.videos.insert(\n    body=body,\n    media=media,\n    parts=[\"snippet\"],\n    notify_subscribers=True\n)\n\nvideo_body = None\n\nwhile video_body is None:\n    status, video_body = upload.next_chunk()\n    if status:\n        print(f\"Upload progress: {status.progress()}\")\n\nprint(video_body)\n# {\"kind\": \"youtube#video\", \"etag\": \"17W46NjVxoxtaoh1E6GmbQ2hv5c\",....}\n</code></pre>"},{"location":"usage/work-with-client/#update","title":"update","text":"<p>Updates a video's metadata.</p> <pre><code>import pyyoutube.models as mds\n\nbody = mds.Video(\n    id=\"fTK1Jj6QlDw\",\n    snippet=mds.VideoSnippet(\n        title=\"What a nice day\",\n        description=\"Blue sky with cloud. updated.\",\n        categoryId=\"1\",\n    )\n)\n\nresp = cli.videos.update(\n    parts=[\"snippet\"],\n    body=body,\n    return_json=True,\n)\nprint(resp)\n# {\"kind\": \"youtube#video\", \"etag\": \"BQUtovVd0TBJwC5S8-Pu-dK_I6s\", \"id\": \"fTK1Jj6QlDw\", \"snippet\": {\"publishedAt\": \"2022-12-15T03:45:16Z\", \"channelId\": \"UCa-vrCLQHviTOVnEKDOdetQ\", \"title\": \"What a nice day\", \"description\": \"Blue sky with cloud. updated.\", \"thumbnails\": {\"default\": {\"url\": \"https://i.ytimg.com/vi/fTK1Jj6QlDw/default.jpg\", \"width\": 120, \"height\": 90}, \"medium\": {\"url\": \"https://i.ytimg.com/vi/fTK1Jj6QlDw/mqdefault.jpg\", \"width\": 320, \"height\": 180}, \"high\": {\"url\": \"https://i.ytimg.com/vi/fTK1Jj6QlDw/hqdefault.jpg\", \"width\": 480, \"height\": 360}, \"standard\": {\"url\": \"https://i.ytimg.com/vi/fTK1Jj6QlDw/sddefault.jpg\", \"width\": 640, \"height\": 480}, \"maxres\": {\"url\": \"https://i.ytimg.com/vi/fTK1Jj6QlDw/maxresdefault.jpg\", \"width\": 1280, \"height\": 720}}, \"channelTitle\": \"ikaros data\", \"categoryId\": \"1\", \"liveBroadcastContent\": \"none\", \"localized\": {\"title\": \"What a nice day\", \"description\": \"Blue sky with cloud. updated.\"}, \"defaultAudioLanguage\": \"en-US\"}}\n</code></pre>"},{"location":"usage/work-with-client/#delete","title":"delete","text":"<p>Deletes a YouTube video.</p> <pre><code>cli.videos.delete(video_id=\"fTK1Jj6QlDw\")\n# True\n</code></pre>"},{"location":"usage/work-with-client/#rate","title":"rate","text":"<p>Add a like or dislike rating to a video or remove a rating from a video.</p> <pre><code>cli.videos.rate(video_id=\"fTK1Jj6QlDw\", rating=\"like\")\n# True\n</code></pre>"},{"location":"usage/work-with-client/#reportabuse","title":"reportAbuse","text":"<p>Report a video for containing abusive content.</p> <pre><code>import pyyoutube.models as mds\n\nbody = mds.VideoReportAbuse(\n    videoId=\"fTK1Jj6QlDw\",\n    reasonId=\"32\"\n)\ncli.videos.report_abuse(body=body)\n# True\n</code></pre>"}]}